services:
  # Main application service with integrated MCP servers
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ${ECR_REGISTRY:-}${ECR_REPOSITORY:-airtable-whatsapp-agent}:${IMAGE_TAG:-latest}
    container_name: airtable-whatsapp-agent
    restart: unless-stopped
    ports:
      - "8000:8000"  # Main application
      - "8001:8001"  # WhatsApp MCP Server
      - "8002:8002"  # Airtable MCP Server
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=0.0.0.0
      - PORT=8000
      # MCP Server URLs (internal)
      - MCP_WHATSAPP_SERVER_URL=http://localhost:8001
      - MCP_AIRTABLE_SERVER_URL=http://localhost:8002
      - MCP_TIMEOUT_SECONDS=30
      - MCP_MAX_RETRIES=3
      - MCP_RETRY_DELAY=1.0
      # AWS Configuration (for production)
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-east-2}
    env_file:
      - .env
    volumes:
      - ${LOG_PATH:-./logs}:/app/logs
      - ${DATA_PATH:-./data}:/app/data
    networks:
      - app-network
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        reservations:
          memory: ${MEMORY_RESERVATION:-1G}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: airtable-whatsapp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: airtable-whatsapp-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-airtable_whatsapp}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: airtable-whatsapp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: airtable-whatsapp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    profiles:
      - monitoring

  # Log aggregation with Fluentd
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile.fluentd
    container_name: airtable-whatsapp-fluentd
    restart: unless-stopped
    volumes:
      - ${LOG_PATH:-./logs}:/fluentd/log
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - app-network
    profiles:
      - monitoring



networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local