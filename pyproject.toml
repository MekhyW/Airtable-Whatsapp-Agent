[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "airtable-whatsapp-agent"
version = "0.1.0"
description = "Autonomous AI agent for Airtable and WhatsApp Business API integration"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Felipe Mekhy", email = "felipe@example.com"},
]
keywords = ["ai", "agent", "airtable", "whatsapp", "automation", "mcp", "langgraph"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
    "Topic :: Office/Business",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # AI and LLM
    "openai>=1.6.0",
    "langgraph>=0.0.40",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    
    # MCP (Model Context Protocol)
    "mcp>=0.4.0",
    "httpx>=0.25.0",
    
    # Database and caching
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "redis>=5.0.0",
    "asyncpg>=0.29.0",
    
    # AWS services
    "boto3>=1.34.0",
    "aioboto3>=12.0.0",
    
    # Security and authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "croniter>=2.0.0",
    
    # HTTP and API
    "aiohttp>=3.9.0",
    "requests>=2.31.0",
    
    # Data validation and serialization
    "marshmallow>=3.20.0",
    "phonenumbers>=8.13.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/MekhyW/airtable-whatsapp-agent"
Repository = "https://github.com/MekhyW/airtable-whatsapp-agent"
Documentation = "https://github.com/MekhyW/airtable-whatsapp-agent#readme"
Issues = "https://github.com/MekhyW/airtable-whatsapp-agent/issues"

[project.scripts]
airtable-whatsapp-agent = "airtable_whatsapp_agent.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/airtable_whatsapp_agent"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["airtable_whatsapp_agent"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "langgraph.*",
    "langchain.*",
    "boto3.*",
    "aioboto3.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]